service: sls-stp-rns
provider:
  name: aws
  runtime: nodejs8.10
  region: us-east-1
  environment:
    Entity_table: ${self:service}-entity-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:Get
        - dynamodb:Put
        - dynamodb:Update
        - dynamodb:Delete
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.Entity_table}"

functions:
  entityCreate:
    handler: src/entity/entity-lambda.onHttpPost
    name: ${self:service}-${self:custom.stage}-entity-create
    tags:
      Description: Add new entity
      EventSource: api
    events:
      - http:
          path: /api/entity
          method: post
          cors: true

  entityGet:
    handler: src/entity/entity-lambda.onHttpGet
    name: ${self:service}-${self:custom.stage}-entity-get
    tags:
      Description: get an entity
      EventSource: api
    events:
      - http:
          path: /api/entity/{id}
          method: get
          cors: true

  entityUpdate:
    handler: src/entity/entity-lambda.onHttpPut
    name: ${self:service}-${self:custom.stage}-entity-put
    tags:
      Description: update an entity
      EventSource: api
    events:
      - http:
          path: /api/entity/{id}
          method: put
          cors: true

  entityList:
    handler: src/entity/entity-lambda.onHttpList
    name: ${self:service}-${self:custom.stage}-entity-list
    tags:
      Description: Add new entity
      EventSource: api
    events:
      - http:
          path: /api/entity
          method: get
          cors: true

resources:
  - ${file(resources/entity/dynamodb.yml)}

plugins:
  - serverless-plugin-typescript
  - serverless-plugin-include-dependencies
  - serverless-offline
  - serverless-prune-plugin
  - serverless-pseudo-parameters

package:
  include:
    - src/core/*
    - src/core/**/*
    - src/entity/*
    - src/entity/**/*

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:service}-${self:custom.stage}-entity
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  failedPayloadBucket: ${self:service}-${self:custom.stage}-failed-payloads
  prune:
    automatic: true
    number: 5